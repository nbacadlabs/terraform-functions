pipeline {
    agent any

    environment {
        ARM_SUBSCRIPTION_ID = credentials('AZURE_SUBSCRIPTION_ID')
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'main', 
                url: 'https://github.com/nbacadlabs/terraform-functions.git'
            }
        }

        stage('Install Terraform') {
            steps {
                sh '''
                if ! terraform -v > /dev/null 2>&1; then
                    curl -o terraform.zip https://releases.hashicorp.com/terraform/1.6.6/terraform_1.6.6_linux_amd64.zip
                    unzip terraform.zip
                    sudo mv terraform /usr/local/bin/
                fi
                '''
            }
        }

        stage('Terraform Init') {
            steps {
                script {
                    withCredentials([azureServicePrincipal('Azure_SP_ID')]) {
                        sh '''
                        az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET --tenant $AZURE_TENANT_ID
                        az account set --subscription $ARM_SUBSCRIPTION_ID
                        '''
                    }
                }
                sh '''
                cd ./aksbootstrap
                terraform init
                '''
            }
        }

        stage('Terraform Plan') {
            steps {
                script {
                    withCredentials([azureServicePrincipal('Azure_SP_ID')]) {
                        sh '''
                        az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET --tenant $AZURE_TENANT_ID
                        az account set --subscription $ARM_SUBSCRIPTION_ID
                        '''
                    }
                }
                sh '''
                cd ./aksbootstrap
                terraform plan -out=tfplan
                '''
            }
        }

        stage('Terraform Apply') {
            steps {
                input message: "Approve deployment?"
                script {
                    withCredentials([azureServicePrincipal('Azure_SP_ID')]) {
                        sh '''
                        az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET --tenant $AZURE_TENANT_ID
                        az account set --subscription $ARM_SUBSCRIPTION_ID
                        '''
                    }
                }
                sh '''
                    cd ./aksbootstrap
                    terraform destroy -auto-approve
                '''
                
                // sh '''
                
                // '''
            }
        }

        // Optional destroy stage
        /*
        stage('Terraform Destroy') {
            steps {
                input message: "Approve destroy?"
                sh '''
                terraform destroy -auto-approve
                '''
            }
        }
        */
    }

    post {
        success {
            echo '✅ Terraform Deployment to Azure AKS Successful!'
        }
        failure {
            echo '❌ Terraform Deployment Failed!'
        }
    }
}
